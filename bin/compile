#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
set -u
# Debug, echo every command
#set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=`cd $(dirname $0); cd ..; pwd`
VENDOR_DIR=${BP_DIR}/vendor

# Make dyno runtime-compatible prefix for compiled artifacts
APP_PREFIX=/app/.heroku
mkdir -p $APP_PREFIX

# Cache compilation artifacts between builds
BP_CACHE_DIR="$CACHE_DIR/heroku-kong-buildpack"
mkdir -p $BP_CACHE_DIR
PREFIX_CACHE_DIR=$BP_CACHE_DIR/app_prefix

# Source for Kong
if [ -f "${ENV_DIR}/KONG_GIT_URL" ]
then
  KONG_GIT_URL=`cat ${ENV_DIR}/KONG_GIT_URL`
else
  KONG_GIT_URL="https://github.com/Mashape/kong.git"
fi
# commit or tag to checkout
if [ -f "${ENV_DIR}/KONG_GIT_COMMITISH" ]
then
  KONG_GIT_COMMITISH=`cat ${ENV_DIR}/KONG_GIT_COMMITISH`
else
  KONG_GIT_COMMITISH="0.11.1"
fi

KONG_SOURCE_DIR="${BP_CACHE_DIR}/kong-source"


# Set dependency versions.
# These correspond to the archives in `vendor/`.
# If upgrading any those archives, then update the corresponding version here.
LUAROCKS_VERSION=2.4.2
OPENSSL_VERSION=1.0.2l
OPENRESTY_VERSION=1.13.6.1

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $(cat $BP_DIR/Aptfile $BUILD_DIR/Aptfile); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_buildpack_kong.sh
export PATH="\$HOME/.heroku/nginx/sbin:\$HOME/.heroku/luajit/bin:\$HOME/.heroku/bin:\$HOME/.apt/usr/local/bin:\$HOME/.apt/usr/bin:\$HOME/.apt/usr/sbin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.heroku/lib:\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/local/lib:\$HOME/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.heroku/lib:\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/local/lib:\$HOME/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.heroku/include:\$HOME/.apt/usr/local/include:\$HOME/.apt/usr/include:/usr/include/x86_64-linux-gnu:/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/local/lib/pkgconfig:\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export LUA_PATH="\$HOME/lib/?.lua;\$HOME/lib/?/init.lua;\$HOME/.luarocks/share/lua/5.1/?.lua;\$HOME/.luarocks/share/lua/5.1/?/init.lua;\$HOME/.heroku/share/lua/5.1/?.lua;\$HOME/.heroku/share/lua/5.1/?/init.lua;./?.lua"
export LUA_CPATH="\$HOME/lib/?.so;\$HOME/.luarocks/lib/lua/5.1/?.so;\$HOME/.heroku/lib/lua/5.1/?.so;./?.so"
EOF

export PATH="$APP_PREFIX/nginx/sbin:$APP_PREFIX/luajit/bin:$APP_PREFIX/bin:$BUILD_DIR/.apt/usr/local/bin:$BUILD_DIR/.apt/usr/bin:$BUILD_DIR/.apt/usr/sbin:/sbin:$PATH"
export LD_LIBRARY_PATH="$APP_PREFIX/lib:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/local/lib:$BUILD_DIR/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib"
export LIBRARY_PATH="$APP_PREFIX/lib:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/local/lib:$BUILD_DIR/.apt/usr/lib:/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib"
export INCLUDE_PATH="$APP_PREFIX/include:$BUILD_DIR/.apt/usr/local/include:$BUILD_DIR/.apt/usr/include:/usr/include/x86_64-linux-gnu:/usr/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/local/lib/pkgconfig:$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig"
export LUA_PATH="$BUILD_DIR/lib/?.lua;$BUILD_DIR/lib/?/init.lua;$BUILD_DIR/.luarocks/share/lua/5.1/?.lua;$BUILD_DIR/.luarocks/share/lua/5.1/?/init.lua;$APP_PREFIX/share/lua/5.1/?.lua;$APP_PREFIX/share/lua/5.1/?/init.lua;./?.lua"
export LUA_CPATH="$BUILD_DIR/lib/?.so;$BUILD_DIR/.luarocks/lib/lua/5.1/?.so;$APP_PREFIX/lib/lua/5.1/?.so;./?.so"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$BP_DIR/export"

# Once the installed packages are in the PATH, use them.

# Build from source to have dyno-compatible path prefix

# Cache the build
VENDOR_CACHE_DIR=${BP_CACHE_DIR}/vendor
mkdir -p ${VENDOR_CACHE_DIR}

# Detect changes in the vendor/ sources
topic "Detecting changes in vendor/"
cd ${VENDOR_DIR}
VENDOR_DIFF=${BP_CACHE_DIR}/.vendor-diff
VENDOR_HASH=${BP_CACHE_DIR}/.vendor-hash
VENDOR_HASH_NEW=${VENDOR_HASH}-new
touch ${VENDOR_DIFF}
touch ${VENDOR_HASH}
touch ${VENDOR_HASH_NEW}
openssl dgst -sha1 * > ${VENDOR_HASH_NEW}
# `diff` signals differences with exit codes. Don't fail fast.
set +e
diff ${VENDOR_HASH} ${VENDOR_HASH_NEW} > ${VENDOR_DIFF}
DIFF_STATUS=$?
set -e
mv -f ${VENDOR_HASH_NEW} ${VENDOR_HASH}

if [ "$DIFF_STATUS" == 0 ] && [ -d "$PREFIX_CACHE_DIR" ]
then
  topic "Restoring from cache"
  cp -R $PREFIX_CACHE_DIR/* $APP_PREFIX/

elif [ "$DIFF_STATUS" == 0 ] || [ "$DIFF_STATUS" == 1 ]
then
  topic "Changes detected"
  IFS=$'\n'
  for DIFF_LINE in $(cat "$VENDOR_DIFF"); do
    echo "       $DIFF_LINE"
  done
  unset IFS

  # Clean-up previous cache
  rm ${VENDOR_DIFF}
  rm -rf ${VENDOR_CACHE_DIR}
  # and cache the new source code
  mv ${VENDOR_DIR} ${VENDOR_CACHE_DIR}
  cd ${VENDOR_CACHE_DIR}

  topic "Building OpenSSL"
  tar -xf openssl-${OPENSSL_VERSION}.tar.gz
  cd openssl-${OPENSSL_VERSION}
  ./config --prefix=$APP_PREFIX -fPIC
  make
  make install
  cd ..

  topic "Building OpenResty"
  tar -xf openssl-${OPENSSL_VERSION}.tar.gz
  tar -xf openresty-${OPENRESTY_VERSION}.tar.gz
  cd openresty-${OPENRESTY_VERSION}
  ./configure --prefix=$APP_PREFIX --with-pcre-jit --with-ipv6 --with-http_realip_module --with-http_ssl_module --with-http_stub_status_module --with-http_v2_module --with-openssl=${VENDOR_CACHE_DIR}/openssl-${OPENSSL_VERSION}
  make
  make install
  cd ..


  topic "Building LuaRocks"
  tar -xf luarocks-${LUAROCKS_VERSION}.tar.gz
  cd luarocks-${LUAROCKS_VERSION}
  ./configure --prefix=${APP_PREFIX} --lua-suffix=jit --with-lua=${APP_PREFIX}/luajit --with-lua-include=${APP_PREFIX}/luajit/include/luajit-2.1
  make build
  make install
  cd ..


  topic "Caching build"
  mkdir -p $PREFIX_CACHE_DIR
  cp -Rf $APP_PREFIX/* $PREFIX_CACHE_DIR/

else
  error "Error detecting cached build: diff exited ${DIFF_STATUS}"
fi

topic "Building Kong from ${KONG_GIT_URL}#${KONG_GIT_COMMITISH}"
# Move the unfortunately named `.luarocks` spec file so that it doesn't
# interfere during CI. We're migrating Kong apps to use `Rockfile` instead.
if [ -f "$BUILD_DIR/.luarocks" ]; then
  mv "$BUILD_DIR/.luarocks" "$BUILD_DIR/Rockfile"
fi
# Ensure we don't have Kong from a previous build
luarocks remove kong || true
if [ -d "$KONG_SOURCE_DIR" ]
then
  cd $KONG_SOURCE_DIR
  git fetch
  git fetch --tags
  git reset --hard $(git rev-list -n 1 $KONG_GIT_COMMITISH)
else
  git clone $KONG_GIT_URL $KONG_SOURCE_DIR
  cd $KONG_SOURCE_DIR
  git checkout $KONG_GIT_COMMITISH
fi
export OPENSSL_DIR=${APP_PREFIX}
# Install Kong itself from the cloned git repo
luarocks make ./kong-*.rockspec
# Install Kong's dependencies via LuaRocks
# (`--local` is required for this to do anything)
luarocks install --local ./kong-*.rockspec
mv bin/* ${APP_PREFIX}/bin/

topic "Installing Lua rocks specified in Rockfile"
cd ${BUILD_DIR}
${BP_DIR}/bin/install-luarocks

topic "Enabling runtime configuration & processes"
cd ${BP_DIR}
mkdir -p $BUILD_DIR/.profile.d
mv .profile.d/* $BUILD_DIR/.profile.d
mkdir -p $BUILD_DIR/config
mv config/* $BUILD_DIR/config
# Move executables for Procfile into place
mkdir -p $BUILD_DIR/bin
cp $BP_DIR/bin/app/heroku-* $BUILD_DIR/bin/

# Avoid moving build for CI, because build is in the right place already.
if [ ! "$BUILD_DIR" = "/app" ]; then
  topic "Making build artifacts available to app"
  mv $APP_PREFIX $BUILD_DIR/.heroku
fi
